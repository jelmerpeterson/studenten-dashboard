{"ast":null,"code":"var _jsxFileName = \"/Users/jelmerpeterson/Documents/winc academy/week6/eindopdracht-dashboard/student-dashboard/src/components/ChartAvg.js\";\nimport React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTooltip, VictoryLine, VictoryGroup } from \"victory\";\nimport StudentData from \"./StudentData\"; // import StudentData from \"./StudentData\";\n\nconst wincTheme = {\n  area: {\n    style: {\n      data: {\n        fill: \"#212121\"\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  axis: {\n    style: {\n      axis: {\n        fill: \"transparent\",\n        stroke: \"#90A4AE\",\n        strokeWidth: 2,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\"\n      },\n      axisLabel: {\n        textAnchor: \"middle\",\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      },\n      grid: {\n        fill: \"none\",\n        stroke: \"none\"\n      },\n      ticks: {\n        fill: \"transparent\",\n        size: 5,\n        stroke: \"#90A4AE\",\n        strokeWidth: 1,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\"\n      },\n      tickLabels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  bar: {\n    style: {\n      data: {\n        fill: \"#4a90e2\",\n        padding: 0,\n        strokeWidth: 0\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 8,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 20\n  },\n  chart: {\n    width: 800,\n    height: 300,\n    padding: 50\n  },\n  errorbar: {\n    borderWidth: 8,\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  group: {\n    colorScale: [\"#F4511E\", \"#FFF59D\", \"#DCE775\", \"#8BC34A\", \"#00796B\", \"#006064\"],\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  legend: {\n    colorScale: [\"#F4511E\", \"#FFF59D\", \"#DCE775\", \"#8BC34A\", \"#00796B\", \"#006064\"],\n    gutter: 10,\n    orientation: \"vertical\",\n    titleOrientation: \"top\",\n    style: {\n      data: {\n        type: \"circle\"\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      },\n      title: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 5,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    }\n  },\n  line: {\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  }\n};\n\nconst getRandomRating = () => 5;\n\nconst getRandomRating2 = () => 4;\n\nlet assignmentRatingAverage = [{\n  assignment: \"W1D1-2\"\n}, {\n  assignment: \"W1D1-1\"\n}, {\n  assignment: \"W1D1-3\"\n}, {\n  assignment: \"W1D2-1\"\n}, {\n  assignment: \"W1D2-2\"\n}, {\n  assignment: \"W1D3-1\"\n}, {\n  assignment: \"W1D3-1\"\n}, {\n  assignment: \"W1D3-2\"\n}, {\n  assignment: \"W1D3-3\"\n}, {\n  assignment: \"W1D3-4\"\n}, {\n  assignment: \"W1D3-5\"\n}, {\n  assignment: \"W1D3-7\"\n}, {\n  assignment: \"jelmer\"\n}];\nassignmentRatingAverage = assignmentRatingAverage.map(avg => ({\n  assignment: avg.assignment,\n  difficultyRating: getRandomRating(),\n  enjoymentRating: getRandomRating2()\n}));\nconsole.log(assignmentRatingAverage); // Add label\n\nconst assignmentRatingAverageWithLabels = assignmentRatingAverage.map(avg => ({\n  assignment: avg.assignment,\n  difficultyRating: avg.difficultyRating,\n  enjoymentRating: avg.enjoymentRating,\n  label: `Opdracht ${avg.assignment},\n    difficultyRating: ${avg.difficultyRating},\n    enjoymentRating: ${avg.enjoymentRating}`\n}));\nassignmentRatingAverage = assignmentRatingAverage.map(avg => ({\n  assignment: avg.assignment,\n  difficultyRating: getRandomRating(),\n  enjoymentRating: getRandomRating2()\n})); // Add label\n\nassignmentRatingAverageWithLabels = assignmentRatingAverage.map(avg => ({\n  assignment: avg.assignment,\n  difficultyRating: avg.difficultyRating,\n  enjoymentRating: avg.enjoymentRating,\n  label: `Opdracht ${avg.assignment},\n    difficultyRating: ${avg.difficultyRating},\n    enjoymentRating: ${avg.enjoymentRating}`\n}));\n\nclass ChartAvg extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(VictoryChart, {\n      domainPadding: 15,\n      theme: wincTheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(VictoryGroup, {\n      offset: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(VictoryBar, {\n      labelComponent: /*#__PURE__*/React.createElement(VictoryTooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 31\n        }\n      }),\n      data: assignmentRatingAverageWithLabels,\n      x: \"assignment\",\n      y: \"difficultyRating\",\n      tickValues: [1, 2, 3, 4, 5],\n      tickFormat: assignmentRatingAverageWithLabels.map(avg => avg.assignment),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(VictoryBar, {\n      labelComponent: /*#__PURE__*/React.createElement(VictoryTooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 31\n        }\n      }),\n      data: assignmentRatingAverageWithLabels,\n      x: \"assignment\",\n      y: \"enjoymentRating\",\n      tickValues: [1, 2, 3, 4, 5],\n      tickFormat: assignmentRatingAverageWithLabels.map(avg => avg.assignment),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(VictoryAxis // tickValues specifies both the number of ticks and where\n    // they are placed on the axis\n    , {\n      tickValues: [1, 2, 3, 4, 5],\n      tickFormat: assignmentRatingAverageWithLabels.map(avg => avg.assignment),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(VictoryChart, {\n      domainPadding: 15,\n      theme: wincTheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(VictoryLine, {\n      style: {\n        data: {\n          stroke: \"#c43a31\"\n        },\n        parent: {\n          border: \"1px solid #ccc\"\n        }\n      },\n      data: assignmentRatingAverage,\n      x: \"assignment\",\n      y: \"difficultyRating\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(VictoryLine, {\n      style: {\n        data: {\n          stroke: \"#ff00ff\"\n        },\n        parent: {\n          border: \"1px solid #ccc\"\n        }\n      },\n      data: assignmentRatingAverage,\n      x: \"assignment\",\n      y: \"enjoymentRating\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis // tickValues specifies both the number of ticks and where\n    // they are placed on the axis\n    , {\n      tickValues: [1, 2, 3, 4, 5],\n      tickFormat: assignmentRatingAverage.map(avg => avg.assignment),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default ChartAvg;","map":{"version":3,"sources":["/Users/jelmerpeterson/Documents/winc academy/week6/eindopdracht-dashboard/student-dashboard/src/components/ChartAvg.js"],"names":["React","VictoryBar","VictoryChart","VictoryAxis","VictoryTooltip","VictoryLine","VictoryGroup","StudentData","wincTheme","area","style","data","fill","labels","fontFamily","fontSize","letterSpacing","padding","stroke","strokeWidth","width","height","axis","strokeLinecap","strokeLinejoin","axisLabel","textAnchor","grid","ticks","size","tickLabels","bar","chart","errorbar","borderWidth","opacity","group","colorScale","legend","gutter","orientation","titleOrientation","type","title","line","getRandomRating","getRandomRating2","assignmentRatingAverage","assignment","map","avg","difficultyRating","enjoymentRating","console","log","assignmentRatingAverageWithLabels","label","ChartAvg","Component","render","parent","border"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  VictoryBar,\n  VictoryChart,\n  VictoryAxis,\n  VictoryTooltip,\n  VictoryLine,\n  VictoryGroup,\n} from \"victory\";\nimport StudentData from \"./StudentData\";\n// import StudentData from \"./StudentData\";\n\nconst wincTheme = {\n  area: {\n    style: {\n      data: {\n        fill: \"#212121\",\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  axis: {\n    style: {\n      axis: {\n        fill: \"transparent\",\n        stroke: \"#90A4AE\",\n        strokeWidth: 2,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n      },\n      axisLabel: {\n        textAnchor: \"middle\",\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n      grid: {\n        fill: \"none\",\n        stroke: \"none\",\n      },\n      ticks: {\n        fill: \"transparent\",\n        size: 5,\n        stroke: \"#90A4AE\",\n        strokeWidth: 1,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n      },\n      tickLabels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  bar: {\n    style: {\n      data: {\n        fill: \"#4a90e2\",\n        padding: 0,\n        strokeWidth: 0,\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 8,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 20,\n  },\n\n  chart: {\n    width: 800,\n    height: 300,\n    padding: 50,\n  },\n  errorbar: {\n    borderWidth: 8,\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2,\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  group: {\n    colorScale: [\n      \"#F4511E\",\n      \"#FFF59D\",\n      \"#DCE775\",\n      \"#8BC34A\",\n      \"#00796B\",\n      \"#006064\",\n    ],\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  legend: {\n    colorScale: [\n      \"#F4511E\",\n      \"#FFF59D\",\n      \"#DCE775\",\n      \"#8BC34A\",\n      \"#00796B\",\n      \"#006064\",\n    ],\n    gutter: 10,\n    orientation: \"vertical\",\n    titleOrientation: \"top\",\n    style: {\n      data: {\n        type: \"circle\",\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n      title: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 5,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n  },\n  line: {\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2,\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n};\n\nconst getRandomRating = () => 5;\nconst getRandomRating2 = () => 4;\n\nlet assignmentRatingAverage = [\n  { assignment: \"W1D1-2\" },\n  { assignment: \"W1D1-1\" },\n  { assignment: \"W1D1-3\" },\n  { assignment: \"W1D2-1\" },\n  { assignment: \"W1D2-2\" },\n  { assignment: \"W1D3-1\" },\n  { assignment: \"W1D3-1\" },\n  { assignment: \"W1D3-2\" },\n  { assignment: \"W1D3-3\" },\n  { assignment: \"W1D3-4\" },\n  { assignment: \"W1D3-5\" },\n  { assignment: \"W1D3-7\" },\n  { assignment: \"jelmer\" },\n];\n\nassignmentRatingAverage = assignmentRatingAverage.map((avg) => ({\n  assignment: avg.assignment,\n  difficultyRating: getRandomRating(),\n  enjoymentRating: getRandomRating2(),\n}));\n\nconsole.log(assignmentRatingAverage);\n\n// Add label\nconst assignmentRatingAverageWithLabels = assignmentRatingAverage.map(\n  (avg) => ({\n    assignment: avg.assignment,\n    difficultyRating: avg.difficultyRating,\n    enjoymentRating: avg.enjoymentRating,\n    label: `Opdracht ${avg.assignment},\n    difficultyRating: ${avg.difficultyRating},\n    enjoymentRating: ${avg.enjoymentRating}`,\n  })\n);\n\nassignmentRatingAverage = assignmentRatingAverage.map((avg) => ({\n  assignment: avg.assignment,\n  difficultyRating: getRandomRating(),\n  enjoymentRating: getRandomRating2(),\n}));\n\n// Add label\nassignmentRatingAverageWithLabels = assignmentRatingAverage.map((avg) => ({\n  assignment: avg.assignment,\n  difficultyRating: avg.difficultyRating,\n  enjoymentRating: avg.enjoymentRating,\n  label: `Opdracht ${avg.assignment},\n    difficultyRating: ${avg.difficultyRating},\n    enjoymentRating: ${avg.enjoymentRating}`,\n}));\n\nclass ChartAvg extends React.Component {\n  render() {\n    return (\n      <>\n        {/* Eerste staaf diagram rood */}\n        <VictoryChart domainPadding={15} theme={wincTheme}>\n          <VictoryGroup offset={20}>\n            <VictoryBar\n              labelComponent={<VictoryTooltip />}\n              data={assignmentRatingAverageWithLabels}\n              x=\"assignment\"\n              y=\"difficultyRating\"\n              tickValues={[1, 2, 3, 4, 5]}\n              tickFormat={assignmentRatingAverageWithLabels.map(\n                (avg) => avg.assignment\n              )}\n            />\n\n            {/* Eerste staaf diagram geel */}\n            <VictoryBar\n              labelComponent={<VictoryTooltip />}\n              data={assignmentRatingAverageWithLabels}\n              x=\"assignment\"\n              y=\"enjoymentRating\"\n              tickValues={[1, 2, 3, 4, 5]}\n              tickFormat={assignmentRatingAverageWithLabels.map(\n                (avg) => avg.assignment\n              )}\n            />\n          </VictoryGroup>\n          <VictoryAxis\n            // tickValues specifies both the number of ticks and where\n            // they are placed on the axis\n            tickValues={[1, 2, 3, 4, 5]}\n            tickFormat={assignmentRatingAverageWithLabels.map(\n              (avg) => avg.assignment\n            )}\n          />\n          <VictoryAxis dependentAxis />\n        </VictoryChart>\n\n        {/* Begin lijn diagram */}\n        <VictoryChart domainPadding={15} theme={wincTheme}>\n          <VictoryLine\n            style={{\n              data: { stroke: \"#c43a31\" },\n              parent: { border: \"1px solid #ccc\" },\n            }}\n            data={assignmentRatingAverage}\n            x=\"assignment\"\n            y=\"difficultyRating\"\n          />\n          <VictoryLine\n            style={{\n              data: { stroke: \"#ff00ff\" },\n              parent: { border: \"1px solid #ccc\" },\n            }}\n            data={assignmentRatingAverage}\n            x=\"assignment\"\n            y=\"enjoymentRating\"\n          />\n          <VictoryAxis\n            // tickValues specifies both the number of ticks and where\n            // they are placed on the axis\n            tickValues={[1, 2, 3, 4, 5]}\n            tickFormat={assignmentRatingAverage.map((avg) => avg.assignment)}\n          />\n          <VictoryAxis dependentAxis />\n        </VictoryChart>\n      </>\n    );\n  }\n}\n\nexport default ChartAvg;\n"]},"metadata":{},"sourceType":"module"}