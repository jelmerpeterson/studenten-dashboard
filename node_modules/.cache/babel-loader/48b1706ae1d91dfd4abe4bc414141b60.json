{"ast":null,"code":"var _jsxFileName = \"/Users/jelmerpeterson/Documents/winc academy/week6/eindopdracht-dashboard/student-dashboard/src/components/ChartAvg.js\";\nimport React from \"react\";\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTooltip, VictoryLine, VictoryGroup } from \"victory\";\nimport StudentData from \"./StudentData\"; // import StudentData from \"./StudentData\";\n\nconst wincTheme = {\n  area: {\n    style: {\n      data: {\n        fill: \"#212121\"\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  axis: {\n    style: {\n      axis: {\n        fill: \"transparent\",\n        stroke: \"#90A4AE\",\n        strokeWidth: 2,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\"\n      },\n      axisLabel: {\n        textAnchor: \"middle\",\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      },\n      grid: {\n        fill: \"none\",\n        stroke: \"none\"\n      },\n      ticks: {\n        fill: \"transparent\",\n        size: 5,\n        stroke: \"#90A4AE\",\n        strokeWidth: 1,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\"\n      },\n      tickLabels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  bar: {\n    style: {\n      data: {\n        fill: \"#4a90e2\",\n        padding: 0,\n        strokeWidth: 0\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 8,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 20\n  },\n  chart: {\n    width: 800,\n    height: 300,\n    padding: 50\n  },\n  errorbar: {\n    borderWidth: 8,\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  group: {\n    colorScale: [\"#F4511E\", \"#FFF59D\", \"#DCE775\", \"#8BC34A\", \"#00796B\", \"#006064\"],\n    width: 350,\n    height: 350,\n    padding: 50\n  },\n  legend: {\n    colorScale: [\"#F4511E\", \"#FFF59D\", \"#DCE775\", \"#8BC34A\", \"#00796B\", \"#006064\"],\n    gutter: 10,\n    orientation: \"vertical\",\n    titleOrientation: \"top\",\n    style: {\n      data: {\n        type: \"circle\"\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      },\n      title: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 5,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    }\n  },\n  line: {\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0\n      }\n    },\n    width: 350,\n    height: 350,\n    padding: 50\n  }\n};\n\nconst ChartAvg = props => {\n  const getRandomRating = () => 5;\n\n  const getRandomRating2 = () => 4;\n\n  const getAssignments = () => {\n    const studentData = StudentData;\n    let assignment = [];\n    const map = new Map();\n\n    for (const item of studentData) {\n      if (!map.has(item.assignment)) {\n        map.set(item.assignment, true);\n        assignment.push({\n          assignment: item.assignment\n        });\n      }\n    } // console.log(assignment);\n\n\n    return assignment;\n  };\n\n  const getAssignmentsAverage = () => {\n    let studentData = StudentData;\n    let assignments = getAssignments();\n    let assignmentsWithData = assignments.map(a => {\n      let data = {};\n      data = studentData.filter(s => {\n        return a.assignment === s.assignment;\n      });\n      const count = data.length;\n      let difficultyRating = data.map(d => {\n        return parseInt(d.difficultyRating);\n      }).reduce((a, b) => a + b, 0);\n      difficultyRating = Math.round(difficultyRating / count);\n      let enjoymentRating = data.map(e => {\n        return parseInt(e.enjoymentRating);\n      }).reduce((a, b) => a + b, 0);\n      enjoymentRating = Math.round(enjoymentRating / count);\n      return {\n        assignment: a.assignment,\n        difficultyRating: difficultyRating,\n        enjoymentRating: enjoymentRating\n      };\n    });\n    return assignmentsWithData;\n  }; // getAssignmentsAverage();\n  // console.log(getAssignmentsAverage());\n\n\n  let chartData = getAssignmentsAverage();\n  chartData = chartData.map(avg => ({\n    assignment: avg.assignment,\n    difficultyRating: avg.difficultyRating,\n    enjoymentRating: avg.enjoymentRating,\n    label: `Assignment: ${avg.assignment}\n    difficultyRating: ${avg.difficultyRating}, enjoymentRating: ${avg.enjoymentRating}`\n  }));\n  console.log(\"Mijn chartdata\", chartData);\n  let assignmentRatingAverage = [{\n    assignment: \"W1D1-2\"\n  }, {\n    assignment: \"W1D1-1\"\n  }, {\n    assignment: \"W1D1-3\"\n  }, {\n    assignment: \"W1D2-1\"\n  }, {\n    assignment: \"W1D2-2\"\n  }, {\n    assignment: \"W1D3-1\"\n  }, {\n    assignment: \"W1D3-1\"\n  }, {\n    assignment: \"W1D3-2\"\n  }, {\n    assignment: \"W1D3-3\"\n  }, {\n    assignment: \"W1D3-4\"\n  }, {\n    assignment: \"W1D3-5\"\n  }, {\n    assignment: \"W1D3-7\"\n  }, {\n    assignment: \"jelmer\"\n  }];\n  assignmentRatingAverage = assignmentRatingAverage.map(avg => ({\n    assignment: avg.assignment,\n    difficultyRating: getRandomRating(),\n    enjoymentRating: getRandomRating2()\n  })); // console.log(assignmentRatingAverage);\n  // Add label\n\n  const assignmentRatingAverageWithLabels = assignmentRatingAverage.map(avg => ({\n    assignment: avg.assignment,\n    difficultyRating: avg.difficultyRating,\n    enjoymentRating: avg.enjoymentRating,\n    label: `Opdracht ${avg.assignment},\n      difficultyRating: ${avg.difficultyRating},\n      enjoymentRating: ${avg.enjoymentRating}`\n  })); // console.log(assignmentRatingAverageWithLabels);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"figure\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(VictoryChart, {\n    domainPadding: 15,\n    theme: wincTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(VictoryGroup, {\n    offset: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(VictoryBar, {\n    labelComponent: /*#__PURE__*/React.createElement(VictoryTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 33\n      }\n    }),\n    data: assignmentRatingAverageWithLabels,\n    x: \"assignment\",\n    y: \"difficultyRating\",\n    tickValues: [1, 2, 3, 4, 5],\n    tickFormat: assignmentRatingAverageWithLabels.map(avg => avg.assignment),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(VictoryBar, {\n    labelComponent: /*#__PURE__*/React.createElement(VictoryTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 33\n      }\n    }),\n    data: assignmentRatingAverageWithLabels,\n    x: \"assignment\",\n    y: \"enjoymentRating\",\n    tickValues: [1, 2, 3, 4, 5],\n    tickFormat: assignmentRatingAverageWithLabels.map(avg => avg.assignment),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(VictoryAxis // tickValues specifies both the number of ticks and where\n  // they are placed on the axis\n  , {\n    tickValues: [1, 2, 3, 4, 5],\n    tickFormat: assignmentRatingAverageWithLabels.map(avg => avg.assignment),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(VictoryAxis, {\n    dependentAxis: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(VictoryChart, {\n    domainPadding: 15,\n    theme: wincTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(VictoryLine, {\n    style: {\n      data: {\n        stroke: \"#c43a31\"\n      },\n      parent: {\n        border: \"1px solid #ccc\"\n      }\n    },\n    data: assignmentRatingAverage,\n    x: \"assignment\",\n    y: \"difficultyRating\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(VictoryLine, {\n    style: {\n      data: {\n        stroke: \"#ff00ff\"\n      },\n      parent: {\n        border: \"1px solid #ccc\"\n      }\n    },\n    data: assignmentRatingAverage,\n    x: \"assignment\",\n    y: \"enjoymentRating\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(VictoryAxis // tickValues specifies both the number of ticks and where\n  // they are placed on the axis\n  , {\n    tickValues: [1, 2, 3, 4, 5],\n    tickFormat: assignmentRatingAverage.map(avg => avg.assignment),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(VictoryAxis, {\n    dependentAxis: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default ChartAvg;","map":{"version":3,"sources":["/Users/jelmerpeterson/Documents/winc academy/week6/eindopdracht-dashboard/student-dashboard/src/components/ChartAvg.js"],"names":["React","VictoryBar","VictoryChart","VictoryAxis","VictoryTooltip","VictoryLine","VictoryGroup","StudentData","wincTheme","area","style","data","fill","labels","fontFamily","fontSize","letterSpacing","padding","stroke","strokeWidth","width","height","axis","strokeLinecap","strokeLinejoin","axisLabel","textAnchor","grid","ticks","size","tickLabels","bar","chart","errorbar","borderWidth","opacity","group","colorScale","legend","gutter","orientation","titleOrientation","type","title","line","ChartAvg","props","getRandomRating","getRandomRating2","getAssignments","studentData","assignment","map","Map","item","has","set","push","getAssignmentsAverage","assignments","assignmentsWithData","a","filter","s","count","length","difficultyRating","d","parseInt","reduce","b","Math","round","enjoymentRating","e","chartData","avg","label","console","log","assignmentRatingAverage","assignmentRatingAverageWithLabels","parent","border"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  VictoryBar,\n  VictoryChart,\n  VictoryAxis,\n  VictoryTooltip,\n  VictoryLine,\n  VictoryGroup,\n} from \"victory\";\nimport StudentData from \"./StudentData\";\n// import StudentData from \"./StudentData\";\n\nconst wincTheme = {\n  area: {\n    style: {\n      data: {\n        fill: \"#212121\",\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  axis: {\n    style: {\n      axis: {\n        fill: \"transparent\",\n        stroke: \"#90A4AE\",\n        strokeWidth: 2,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n      },\n      axisLabel: {\n        textAnchor: \"middle\",\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n      grid: {\n        fill: \"none\",\n        stroke: \"none\",\n      },\n      ticks: {\n        fill: \"transparent\",\n        size: 5,\n        stroke: \"#90A4AE\",\n        strokeWidth: 1,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n      },\n      tickLabels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  bar: {\n    style: {\n      data: {\n        fill: \"#4a90e2\",\n        padding: 0,\n        strokeWidth: 0,\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 8,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 20,\n  },\n\n  chart: {\n    width: 800,\n    height: 300,\n    padding: 50,\n  },\n  errorbar: {\n    borderWidth: 8,\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2,\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  group: {\n    colorScale: [\n      \"#F4511E\",\n      \"#FFF59D\",\n      \"#DCE775\",\n      \"#8BC34A\",\n      \"#00796B\",\n      \"#006064\",\n    ],\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n  legend: {\n    colorScale: [\n      \"#F4511E\",\n      \"#FFF59D\",\n      \"#DCE775\",\n      \"#8BC34A\",\n      \"#00796B\",\n      \"#006064\",\n    ],\n    gutter: 10,\n    orientation: \"vertical\",\n    titleOrientation: \"top\",\n    style: {\n      data: {\n        type: \"circle\",\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n      title: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 5,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n  },\n  line: {\n    style: {\n      data: {\n        fill: \"transparent\",\n        opacity: 1,\n        stroke: \"#455A64\",\n        strokeWidth: 2,\n      },\n      labels: {\n        fontFamily: \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\",\n        fontSize: 12,\n        letterSpacing: \"normal\",\n        padding: 8,\n        fill: \"#455A64\",\n        stroke: \"transparent\",\n        strokeWidth: 0,\n      },\n    },\n    width: 350,\n    height: 350,\n    padding: 50,\n  },\n};\n\nconst ChartAvg = (props) => {\n  const getRandomRating = () => 5;\n  const getRandomRating2 = () => 4;\n\n  const getAssignments = () => {\n    const studentData = StudentData;\n    let assignment = [];\n    const map = new Map();\n    for (const item of studentData) {\n      if (!map.has(item.assignment)) {\n        map.set(item.assignment, true);\n        assignment.push({ assignment: item.assignment });\n      }\n    }\n    // console.log(assignment);\n    return assignment;\n  };\n\n  const getAssignmentsAverage = () => {\n    let studentData = StudentData;\n\n    let assignments = getAssignments();\n    let assignmentsWithData = assignments.map((a) => {\n      let data = {};\n\n      data = studentData.filter((s) => {\n        return a.assignment === s.assignment;\n      });\n\n      const count = data.length;\n      let difficultyRating = data\n        .map((d) => {\n          return parseInt(d.difficultyRating);\n        })\n        .reduce((a, b) => a + b, 0);\n      difficultyRating = Math.round(difficultyRating / count);\n      let enjoymentRating = data\n        .map((e) => {\n          return parseInt(e.enjoymentRating);\n        })\n        .reduce((a, b) => a + b, 0);\n      enjoymentRating = Math.round(enjoymentRating / count);\n      return {\n        assignment: a.assignment,\n        difficultyRating: difficultyRating,\n        enjoymentRating: enjoymentRating,\n      };\n    });\n    return assignmentsWithData;\n  };\n\n  // getAssignmentsAverage();\n  // console.log(getAssignmentsAverage());\n\n  let chartData = getAssignmentsAverage();\n  chartData = chartData.map((avg) => ({\n    assignment: avg.assignment,\n    difficultyRating: avg.difficultyRating,\n    enjoymentRating: avg.enjoymentRating,\n    label: `Assignment: ${avg.assignment}\n    difficultyRating: ${avg.difficultyRating}, enjoymentRating: ${avg.enjoymentRating}`,\n  }));\n\n  console.log(\"Mijn chartdata\", chartData);\n\n  let assignmentRatingAverage = [\n    { assignment: \"W1D1-2\" },\n    { assignment: \"W1D1-1\" },\n    { assignment: \"W1D1-3\" },\n    { assignment: \"W1D2-1\" },\n    { assignment: \"W1D2-2\" },\n    { assignment: \"W1D3-1\" },\n    { assignment: \"W1D3-1\" },\n    { assignment: \"W1D3-2\" },\n    { assignment: \"W1D3-3\" },\n    { assignment: \"W1D3-4\" },\n    { assignment: \"W1D3-5\" },\n    { assignment: \"W1D3-7\" },\n    { assignment: \"jelmer\" },\n  ];\n\n  assignmentRatingAverage = assignmentRatingAverage.map((avg) => ({\n    assignment: avg.assignment,\n    difficultyRating: getRandomRating(),\n    enjoymentRating: getRandomRating2(),\n  }));\n\n  // console.log(assignmentRatingAverage);\n\n  // Add label\n  const assignmentRatingAverageWithLabels = assignmentRatingAverage.map(\n    (avg) => ({\n      assignment: avg.assignment,\n      difficultyRating: avg.difficultyRating,\n      enjoymentRating: avg.enjoymentRating,\n      label: `Opdracht ${avg.assignment},\n      difficultyRating: ${avg.difficultyRating},\n      enjoymentRating: ${avg.enjoymentRating}`,\n    })\n  );\n  // console.log(assignmentRatingAverageWithLabels);\n\n  return (\n    <React.Fragment>\n      <figure>\n        <div>\n          {/* Eerste staaf diagram rood */}\n          <VictoryChart domainPadding={15} theme={wincTheme}>\n            <VictoryGroup offset={20}>\n              <VictoryBar\n                labelComponent={<VictoryTooltip />}\n                data={assignmentRatingAverageWithLabels}\n                x=\"assignment\"\n                y=\"difficultyRating\"\n                tickValues={[1, 2, 3, 4, 5]}\n                tickFormat={assignmentRatingAverageWithLabels.map(\n                  (avg) => avg.assignment\n                )}\n              />\n\n              {/* Eerste staaf diagram geel */}\n              <VictoryBar\n                labelComponent={<VictoryTooltip />}\n                data={assignmentRatingAverageWithLabels}\n                x=\"assignment\"\n                y=\"enjoymentRating\"\n                tickValues={[1, 2, 3, 4, 5]}\n                tickFormat={assignmentRatingAverageWithLabels.map(\n                  (avg) => avg.assignment\n                )}\n              />\n            </VictoryGroup>\n            <VictoryAxis\n              // tickValues specifies both the number of ticks and where\n              // they are placed on the axis\n              tickValues={[1, 2, 3, 4, 5]}\n              tickFormat={assignmentRatingAverageWithLabels.map(\n                (avg) => avg.assignment\n              )}\n            />\n            <VictoryAxis dependentAxis />\n          </VictoryChart>\n\n          {/* Begin lijn diagram */}\n          <VictoryChart domainPadding={15} theme={wincTheme}>\n            <VictoryLine\n              style={{\n                data: { stroke: \"#c43a31\" },\n                parent: { border: \"1px solid #ccc\" },\n              }}\n              data={assignmentRatingAverage}\n              x=\"assignment\"\n              y=\"difficultyRating\"\n            />\n            <VictoryLine\n              style={{\n                data: { stroke: \"#ff00ff\" },\n                parent: { border: \"1px solid #ccc\" },\n              }}\n              data={assignmentRatingAverage}\n              x=\"assignment\"\n              y=\"enjoymentRating\"\n            />\n            <VictoryAxis\n              // tickValues specifies both the number of ticks and where\n              // they are placed on the axis\n              tickValues={[1, 2, 3, 4, 5]}\n              tickFormat={assignmentRatingAverage.map((avg) => avg.assignment)}\n            />\n            <VictoryAxis dependentAxis />\n          </VictoryChart>\n        </div>\n      </figure>\n    </React.Fragment>\n  );\n};\n\nexport default ChartAvg;\n"]},"metadata":{},"sourceType":"module"}